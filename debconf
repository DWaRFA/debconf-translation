#!/usr/bin/perl -w

=head1 NAME

debconf - runs a program under debconf

=head1 SYNOPSIS

 debconf owner [-t templates] program [params]

=head1 DESCRIPTION

This program runs a program that uses debconf, and talkes to it via the
debconf protocol, accessing the database and displaying questions as
directed.

If the -t flag is specified, the filename after it should be a debconf
templates file, which will be loaded first.

=head 1 RETURN VALUE

This program returns the return code of the program it runs.

=cut

sub usage {
	die "Usage: $0 template program args\n";
}

use strict;
use Debconf::Template;
use Debconf::ConfigDb qw(loaddb savedb registertemplates);
use Debconf::Config qw(dbdir);
use Debconf::AutoSelect qw(:all);
use Debconf::Log qw(:all);

# Parse parameters.
my (@templates, $package, @command);
# If only perl-base had getopt..
for (my $x=0; $x < @ARGV;) {
        $_=$ARGV[$x++];

	if (/^-(?:t|-templates)$/) {
		push @templates, $ARGV[$x++];
	}
	elsif (/^--?(\w+)/) {
		print STDERR "Unknown option: $1\n";
		usage();
	}
	elsif (! $package) {
		$package=$_;
	}
	else {
		push @command, $_;
	}
}
usage unless $package and @command;

# Initialize.
debug developer => "debconf started";
loaddb(dbdir());
my $frontend=make_frontend();
$frontend->default_title($package);

# Load templates.
foreach my $fn (@templates) {
	debug developer => "loading templates from $fn";
	registertemplates($package, Debconf::Template->load($fn));
}

# Start up the confmodule we were asked to run.
my $confmodule=make_confmodule(join " ",@ARGV);

# Make sure any questions the confmodule generates are owned by this package.
$confmodule->owner($package);

# Talk to it until it is done.
1 while ($confmodule->communicate);

# End.
$frontend->shutdown;
savedb(dbdir());
exit $confmodule->exitcode;

=head1 AUTHOR

Joey Hess <joey@kitenet.net>

=cut
