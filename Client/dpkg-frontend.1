.TH DPKG-FRONTEND 1
.SH NAME
dpkg-frontend \- communicate with Debian configuration system FrontEnd.
.SH SYNOPSIS
.B dpkg-frontend
[options]
.SH DESCRIPTION
.BR dpkg-frontend
is used by confmodules and other scripts to communicate with the FrontEnd
user interface. This program can cause the frontend to display test to the
user and ask the user questions.
.PP
A quick description of the protocol used to communicate between the FrontEnd and
.BR dpkg-frontend
is in order. They communicate using standard input and output. It is a
command-based protocol, and each command
.BR dpkg-frontend
sends causes the FrontEnd to reply with a return value. So anything your
script sends to standard output or reads from standard input will be assumed
to be part of this communication, and you should never interfere with
.BR dpkg-frontend's
standard input or output.
.PP
Note that if a FrontEnd is not running, dpkg-frontend will start one up
automatically. By default, it will use a FrontEnd that operates in 
non-interactive mode, but you can make it use a different FrontEnd by
setting DEBIAN_FRONTEND to the name of the FrontEnd you prefer.
.PP
.BR dpkg-frontend
recognizes a number of options. Any number of options can be specified, and the
order is important. The options are processed in the order given, and many
of the options cause commands to be sent to the FrontEnd.
.SH OPTIONS
.TP
.I "\-h, \-\-help"
Output usage help
.TP
.I "\-P, \-\-print"
Print out (to standard error) the return code of the last command sent to
the FrontEnd. See the EXAMPLES section below for a demo of how to use this.
.TP
.I "\-pvalue, \-\-priority=value"
Set the priority of the next question, note, or test displayed to the
specified value. The default priority is "medium". The new priority remains
in effect until it is changed or until
.BR dpkg-frontend
finishes. Current valid priorities are low, medium, high, and critical.
.PP
These options cause
.BR dpkg-frontend
to communicate with the FrontEnd.
.TP
.I "\-I, \-\-init"
Initialize communication with the FrontEnd. This causes protocol version
numbers and capability information to be exchanged. It is reccommended that
this be called before you do anything else. The FrontEnd returns the
protocol version it supports.
.TP
.I "\-B, \-\-can\-backup"
This lets the FrontEnd know that you are capable of backing up to previous
questions or other items. It will cause the FrontEnd to provide the user
with a "Back" button of some kind. If the user clicks on the button,
.BR dpkg-frontend
will return 1. You can test for trhis in your program and handle it
appropriatly. The FrontEnd returns the capabilities it supports.
.TP
.I "\-Ttitle, \-\-title=title"
Set the title displayed by the FrontEnd.
.TP
.I "\-s, \-\-stop"
Tell the FrontEnd we are finished.
.TP
.I "\-iquestion, \-\-input=question"
Tell the frontend to present a question to the user.
.TP
.I "\-gquestion, \-\-get=question"
Makes the FrontEnd return the value the user answered for a question. This
automatically causes --print to be set so the value is printed out.
.TP
.I "[, --beginblock"
Begin a block. A block can hold a number of questions and texts and will be
displayed to the user all at once by many FrontEnds. Blocks can be nested.
.TP
.I "], --endblock"
End a block.
.TP
.I "\-G, \-\-go"
Tell the FrontEnd to present all questions, notes, text, etc to the user.
Prints "backup" if the user hits the Back button and --print was specified.
Some FrontEnds will just buffer everything and not display any of these items
until you use --go.
.TP
.I "\-rtemplate:question, \-\-register=template:question"
Add a mapping for the specified question to the specified template. This
makes the description, type, default values, etc, in the template be used
when the question is displayed.
.TP
.I "\-u, \-\-unregister=question"
Remove the mapping for the specified question.
.SH "RETURN CODES"
A code of 1 is returned if the user hits the Back button on the FrontEnd.
.SH EXAMPLES
 dpkg-frontend --init --can-backup --title \\
 	"Hi" --input foo --go
.PP
Makes the Frontend prompt for the user to answer the question named "foo".
.PP
 exec 3>&1
 VALUE=`dpkg-frontend --get foo 2>&1 1>&3`
.PP
Gets the value of the variable named "foo" and saves it in the shell
variable $VALUE while letting the standard output of
.BR dpkg-frountend
pass through unchanged, as it must.
.SH AUTHOR
Joey Hess <joey@kitenet.net>
