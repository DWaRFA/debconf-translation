.TH DEBCONF 8
.SH NAME
debconf \- Debian package configuration system
.SH DESCRIPTION
Debconf is a configuration system for Debian packages. There is a
rarely-used command named debconf, documented in
.BR debconf (1)
.P
Debconf provides a consistent interface for configuring packages, allowing
you to choose from several user interface frontends. It supports
preconfiguring packages before they are installed, which allows large
installs and upgrades to ask you for all the necessary information up
front, and then go do the work while you do something else.  It lets you,
if you're in a hurry, skip over less important questions and information
while installing a package (and revisit it later).
.SH "Preconfiguring packages"
Debconf can configure packages before they are even installed onto
your system. This is useful because it lets all the questions the
packages are going to ask be asked at the beginning of an install,
so the rest of the install can proceeed while you are away getting
a cup of coffee.
.P
If you use apt (version 0.5 or above), and you have apt-utils installed,
each package apt installs will be automatically preconfigured. This is
controlled via
.I /etc/apt/apt.conf.d/70debconf
.P
Sometimes you might want to preconfigure a package
by hand, when you're not installing it with apt. You can use
.B dpkg-preconfigure (8)
to do that, just pass it the filenames of the packages you 
want to preconfigure. You will need apt-utils installed for that to work.
.SH Reconfiguring packages
Suppose you installed the package, and answered debconf's questions, but
now that you've used it awhile, you realize you want to go back and change
some of your answers. In the past, reinstalling a package was often the thing
to do when you got in this situation, but when you reinstall the package,
debconf seems to remember you have answered the questions, and doesn't ask
them again (this is a feature).
.P
Luckily, debconf makes it easy to reconfigure any package that uses it.
Suppose you want to reconfigure debconf itself. Just run, as root:
  dpkg-reconfigure debconf
.P
This will ask all the questions you saw when debconf was first installed.
It may ask you other questions as well, since it asks even low priority
questions that may have been skipped when the package was installed.
You can use it on any other package that uses debconf, as well.
.SH Frontends
One of debconf's unique features is that the interface it presents to
you is only one of many, that can be swapped in at will. There are many
debconf frontends available:
.TP
.B dialog
The default frontend, this uses the 
.B whiptail (1)
or
.B dialog (1)
programs to display questions to you. It works in text mode.
.TP
.B readline
.RS
The most traditional frontend, this looks quite similar
to how Debian configuration always has been: a series of
questions, printed out at the console using plain text, and
prompts done using the readline library. It even supports tab
completion. The libterm-readline-gnu-perl package is strongly
reccommended if you chose to use this frontend; the default
readline module isn't really good enough.
.P
This frontend has some special hotkeys. Pageup (or ctrl-u)
will go back to the previous question (if that is supported
by the package that is using debconf), and pagedown (or 
ctrl-v) will skip forward to the next question.
.P
This is the best frontend for remote admin work over a slow
connection, or for those who are comfortable with unix.
.RE
.TP
.B noninteractive
This is the anti-frontend. It never interacts with you at all, and
makes the default answers be used for all questions. It will
occasionally mail root with messages the package wanted to display,
but that's it; otherwise it is completly silent and unobtrusive, a
perfect frontend for automatic installs.  If you are using this
front-end, and require non-default answers to questions, you will need
to pre-populate the debconf database; see the section below on
Unattended Package Installation for more details.
.TP
.B gnome
This is a modern X GUI using the gtk and gnome libraries. Of course, it
requires a valid DISPLAY to work; debconf will fall back to other frontends
if it can't work. Note that this frontend requires you have the
libgnome-perl package installed.
.TP
.B editor
This is for those fanatics who have to do everything in a
text editor. It runs your editor on a file that looks
something like a typical unix config file, and you edit the
file to communicate with debconf. Debconf's author takes the
fifth amendment regarding the circumstances that led to this
frontend being written.
.TP
.B web
.RS
This frontend acts as a web server, that you connect to
with your web browser, to browse the questions and answer them.
It has a lot of promise, but is a little rough so far.
When this frontend starts up, it will print out the location
you should point your web browser to. You have to run the web
browser on the same machine you are configuring, for security
reasons.
.P
Do keep in mind that this is not a very secure frontend.
Anyone who has access to the computer being configured
can currently access the web server and configure things
while this frontend is running. So this is more of a
proof of concept than anything.
.RE
.P
You can change the default frontend debconf uses by reconfiguring
debconf. On the other hand, if you just want to change the frontend
for a minute, you can set the DEBIAN_FRONTEND environment variable to
the name of the frontend to use. For example:
  DEBIAN_FRONTEND=readline apt-get install slrn
.P
The 
.B dpkg-reconfigure (8)
and
.B dpkg-preconfigure (8)
commands also let you pass 
.I --frontend=
to them, followed by the frontend you want them to use.
.P
Note that not all frontends will work in all circumstances. If a frontend
fails to start up for some reason, debconf will print out a message
explaining why, and fall back to the next-most similar frontend.
.SH Priorities
Another nice feature of debconf is that the questions it asks you are
prioritized. If you don't want to be bothered about every little thing,
you can set up debconf to only ask you the most important questions.
On the other hand, if you are a control freak, you can make it show
you all questions. Each question has a priority. In increasing order of
importance:
.TP
.B low
Very trivial questions that have defaults that will work in the vast majority
of cases.
.TP
.B medium
Normal questions that have reasonable defaults.
.TP
.B high
Questions that don't have a reasonable default.
.TP
.B critical
Questions that you really, really need to see (or else).
.P
Only questions with a priority equal to or greater than the priority you
choose will be shown to you. You can set the priority value by
reconfiguring debconf, or temporarily by passing
.I --priority=
followed by the value to the
.B dpkg-reconfigure (8)
and
.B dpkg-preconfigure (8)
commands, or by setting the DEBIAN_PRIORITY environment variable.
.SH Backend Database
Debconf uses a rather flexible and potentially complicated backend
database for storing data such as the answers to questions. The file
.B /etc/debconf.conf
is used to configure this database. If you need to set up something
complicated, like make debconf read a remote database to get defaults,
with local overrides, read the
.B debconf.conf (5)
man page for all the gory details. Generally,
the backend database is located in
.B /var/cache/debconf/
.SH Unattended Package Installation
Occasionally, it is required to perform unattended installation of
debian packages to systems, but default answers to configuration
questions are not acceptable.
.P
The sequence is
.TP
.B 1
Load the templates for the package to be installed and configure them
(perhaps using
.BR dpkg-preconfigure (8)
), or install the package and answer the questions manually.  This only
needs to be performed on one system.
.TP
.B 2
Extract the configuration for the desired package(s) from the Debconf
backend database
.TP
.B 3
Pre-populate the Debconf backend database on the target systems with
the configuration
.TP
.B 4
Install the packages using the Noninteractive front-end
.P
The exact process involved for steps 2 and 3 will depend on how
Debconf is configured on the master and target systems.  Converting
the Debconf backend database to a directory heirarcy as described in
.BR debconf.conf (5)
and
.BR debconf-copydb (1)
will then make it trivial to extract the answers from the database and
copy out to the target systems.  An entire network of debian machines
can also have any or all package installation questions answered
automatically by a single LDAP server.
.P
You can extract the list of debconf configuration questions using
.BR debconf-show (1)
, and
.BR debconf-communicate (1)
can be used to feed them back in, but only if the target Debconf
database has had the templates for that package loaded via
.BR debconf-loadtemplate (1)
or
.BR dpkg-preconfigure (8) .
.P
.SH Developing for Debconf
Package developers and others who want to develop packages that use 
debconf should read
.BR debconf-devel (8) .
.P
Briefly, debconf communicates with maintainer scripts or other programs
via standard input and output, using a simple line-oriented command language 
similar to that used by common internet protocols such as SMTP. Programs use
this protocol to ask debconf to display questions to the user, and retrieve
the user's answers. The questions themselves are defined in a separate file, 
called the "templates file", which has a format not unlike a debian control
file.
.P
Debian packages which use debconf typically provide
both a templates file and a "config" script (run to preconfigure the
package) in the control metadata section of the package.
.SH ENVIRONMENT
.TP
.B DEBIAN_FRONTEND
Used to temporarily change the frontend debconf uses. See above.
.TP
.B DEBIAN_PRIORITY
Used to temporarily change the minimum priority of question debconf will
display. See above.
.TP
.B DEBCONF_DEBUG
.RS
Turns on debugging output on standard error. May be set to a facility name
or a regular expression which matches a facility name (such as '.*' to output
all debug info). The facility names include:
.TP
.B user
Debugging info of interest to a debconf user.
.TP
.B developer
Debugging info of interest to a package developer.
.TP
.B db
Debugging info about the backend database.
.RE
.TP
.B DEBCONF_NOWARNINGS
Set to "yes" to disable some warnins that debconf may display. Does not
suppress display of fatal errors.
.TP
.B DEBCONF_TERSE
Set to "yes" to enable terse mode, in which debconf frontends cut down on
the verbage as much as possible.
.TP
.B DEBCONF_SHOWOLD
Set to "yes" to force debconf to redisplay old questions that you have
already seen before.
.SH BUGS
Probably quite a few, there's a lot of code here.
.P
If you do file a bug report, be sure to include the following information:
.TP
.B *
The debconf frontend you were using when the problem occurred
.TP
.B *
What you did to trigger the problem.
.TP
.B *
The full text of any error messages. If you can reproduce the bug, do so
with DEBCONF_DEBUG='.*' set and include. This speeds up debugging a
lot.
.SH SEE ALSO
.BR debconf.conf (5),
.BR dpkg-preconfigure (8),
.BR dpkg-reconfigure (8),
.BR debconf (1),
.SH AUTHOR
Joey Hess <joeyh@debian.org>
